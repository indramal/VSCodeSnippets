{"id":1,"parentId":-1,"label":"snippets","lastId":78,"folder":true,"children":[{"id":3,"parentId":1,"label":"Rust Snippets","folder":true,"children":[{"id":4,"parentId":3,"label":"RSHDBQ","value":"match ${1:Databse_Query_Funtion_Name}(${2:Input_Struct}).await {\n    Ok(json_data) => (StatusCode::OK, json_data).into_response(), // Return the JSON response on success with 200 OK\n    Err(e) => AppError::DatabaseError(format!(\"{}\", e).to_string()).into_response(),\n}\n$3","language":".rs","children":[],"resolveSyntax":false,"description":"INDRA - Rust Axum Handler Database Query Funtion Call","prefix":""},{"id":2,"parentId":3,"label":"RSHFn","value":"// ===============================================================================\n// ===============================================================================\n// ===============================================================================\n\npub async fn ${1:Funtion_Name}(\n    inputdata: Result<Json<${2:STRUCT_NAME}>, JsonRejection>, // Get as result because input struct can be error\n) -> impl IntoResponse {\n    match inputdata {\n        Ok(Json(payload)) => {\n            // Validate the payload after deserialization\n            if let Err(validation_errors) = payload.validate() {\n                return (AppError::ValidationError(validation_errors)).into_response();\n            }\n\t\t    // Proceed if validation passes\n\t        $4\n        }\n        Err(_) => (AppError::BadRequest(\n            \"${3:Error_Code_Number}\".to_string(),\n            \"Missing or invalid request fields\".to_string(),\n        ))\n        .into_response(),\n    }\n}","language":".rs","children":[],"resolveSyntax":false,"description":"INDRA - Rust Axum Handler Funtion","prefix":""},{"id":5,"parentId":3,"label":"RSHNewFile","value":"// ! File Code for Error: ${3:Error_Code_Number}\n\nuse crate::utilities::custorm_errors::AppError;\nuse axum::extract::rejection::JsonRejection;\nuse axum::{http::StatusCode, response::IntoResponse, Json};\nuse serde::Deserialize;\nuse validator::Validate;\n\n// ===============================================================================\n// ===============================================================================\n// ===============================================================================\n\npub async fn ${1:Funtion_Name}(\n    inputdata: Result<Json<${2:STRUCT_NAME}>, JsonRejection>, // Get as result because input struct can be error\n) -> impl IntoResponse {\n    match inputdata {\n        Ok(Json(payload)) => {\n            // Validate the payload after deserialization\n            if let Err(validation_errors) = payload.validate() {\n                return (AppError::ValidationError(validation_errors)).into_response();\n            }\n\t\t    // Proceed if validation passes\n            match ${4:Databse_Query_Funtion_Name}(payload).await {\n                Ok(json_data) => (StatusCode::OK, json_data).into_response(), // Return the JSON response on success\n                Err(e) => AppError::DatabaseError(format!(\"{}\", e)).into_response(),\n            }\n\t        $5\n        }\n        Err(_) => (AppError::BadRequest(\n            \"${3:Error_Code_Number}\".to_string(),\n            \"Missing or invalid request fields\".to_string(),\n        ))\n        .into_response(),\n    }\n}\n","language":".rs","children":[],"resolveSyntax":false,"description":"INDRA - Rust Axum Handler New File","prefix":""},{"id":6,"parentId":3,"label":"RSHQFn","value":"// ===============================================================================\n// ===============================================================================\n// ===============================================================================\n\npub async fn ${1:Funtion_Name}(\n    inputdata: Result<Json<${2:STRUCT_NAME}>, JsonRejection>, // Get as result because input struct can be error\n) -> impl IntoResponse {\n    match inputdata {\n        Ok(Json(payload)) => {\n            // Validate the payload after deserialization\n            if let Err(validation_errors) = payload.validate() {\n                return (AppError::ValidationError(validation_errors)).into_response();\n            }\n\t\t    // Proceed if validation passes\n            match ${4:Database_Query_Funtion_Name}(payload).await {\n                Ok(json_data) => (\n                    StatusCode::OK,\n                    Json(json!({\n                                    \"code\": \"OK\",\n                                    \"message\": {\n                                        \"success\": *json_data\n                                    }\n                                }\n                    )),\n                ).into_response(), // Return the JSON response on success\n                Err(e) => AppError::DatabaseError(format!(\"{}\", e)).into_response(),\n            }\n\t        $5\n        }\n        Err(_) => (AppError::BadRequest(\n            \"${3:Error_Code_Number}\".to_string(),\n            \"Missing or invalid request fields\".to_string(),\n        ))\n        .into_response(),\n    }\n}","language":".rs","children":[],"resolveSyntax":false,"description":"INDRA - Rust Axum Handler Funtion with DB Query Funtion Call","prefix":""},{"id":7,"parentId":3,"label":"RSQInsertFuntion","value":"// ===============================================================================\n// ===============================================================================\n// ===============================================================================\n\npub async fn q_insert_${1:Funtion_name}(\n    inputdata: ${2:Struct_name}, // Get as result because input struct can be error\n) -> Result<Json<Value>, Error> {\n    // Todo: Every Funtion have 2 struct: Input Data Struct and Database Struct. This not have response struct because this is INSERT.\n\n    if let Err(validation_errors) = inputdata.validate() {\n        bail!(validation_errors.to_string());\n    }\n    // Proceed if validation passes\n    let session = get_db_modify().await.map_err(|err| {\n        error!(\"Database session error: {}\", err);\n        anyhow!(\"Database session error\")\n    })?;\n\n    let now = Utc::now().timestamp_millis(); // Todo: Edit this\n    let uuid = Uuid::now_v7(); // Todo: Edit this\n\n    // TODO: Add other Codes here\n\n    let hashed_password = match password_hash(inputdata.passwordv).await { // Todo: Edit this\n        Ok(Json(password)) => {\n            password \n        }\n        Err(e) => {\n            error!(\"Error hashing password: {}\", e);\n            bail!(\"Error hashing password\")\n        }\n    }; \n\n    let data = UserDatabase { // Todo: Edit this\n        user_id: uuid,\n        first_name: inputdata.first_name,\n        last_name: inputdata.last_name,\n        email: inputdata.email,\n        phone: inputdata.phone,\n        address: inputdata.address,\n        shipping_address: inputdata.shipping_address,\n        date_of_birth: None,\n        passwordv: hashed_password[\"password_hash\"]\n        .as_str()\n        .unwrap()\n        .to_string(),\n        salt: hashed_password[\"salt\"].as_str().unwrap().to_string(),\n        role: inputdata.role,\n        is_active: true,\n        last_login: CqlTimestamp(now),\n        created_at: CqlTimestamp(now),\n        updated_at: CqlTimestamp(now),\n    }; \n\n    let query = \"INSERT INTO users.user_details (\n    user_id, first_name, last_name, email, phone, address, shipping_address,date_of_birth, \n    passwordv, salt, role, is_active, last_login, created_at, updated_at\n    ) VALUES \n     (:user_id, :first_name, :last_name,:email, :phone,:address, :shipping_address,:date_of_birth, :passwordv,\n     :salt, :role, :is_active, :last_login, :created_at, :updated_at\n     )\"; // Todo: Edit this\n\n    let insert_query: PreparedStatement = session.prepare(query).await.map_err(|err| {\n        error!(\"Query preparation error: {}\", err);\n        anyhow!(\"Database preparation error\")\n    })?;\n\n    session\n        .execute_unpaged(&insert_query, data)\n        .await\n        .map_err(|err| {\n            error!(\"Query execution error: {}\", err);\n            anyhow!(\"Database query failed\")\n        })?;\n\n    let response_data_json = json!({\n        \"status\": \"success\",\n        \"user_id\": &uuid.to_string(), // Todo: Edit this\n    });\n\n    Ok(Json(response_data_json))\n}","language":".rs","children":[],"resolveSyntax":false,"description":"INDRA - Rust Axum Query Insert Funtion Code","prefix":""},{"id":8,"parentId":3,"label":"RSQSelectFuntion","value":"// ===============================================================================\n// ===============================================================================\n// ===============================================================================\n\npub async fn q_select_${1:Funtion_Name}(inputdata: ${2:Struct_Name}) -> Result<Json<Value>, Error> {\n    // Todo: Every Funtion have 3 struct: Input Data Struct, Database Struct and Response Struct.\n\n    if let Err(validation_errors) = inputdata.validate() {\n        bail!(validation_errors.to_string());\n    }\n\n    let session = get_db_select().await.map_err(|err| {\n        error!(\"Database session error: {}\", err);\n        anyhow!(\"Database session error\")\n    })?;\n\n    // TODO: Add other Codes here\n\n    let query = \"SELECT user_id, first_name, last_name, email, phone, address, shipping_address,date_of_birth, \n             passwordv, salt, role, is_active, last_login, created_at, updated_at\n             FROM users.user_details WHERE user_id = ?;\"; // TODO: Edit this\n\n    let insert_query: PreparedStatement = session.prepare(query).await.map_err(|err| {\n        error!(\"Query preparation error: {}\", err);\n        anyhow!(\"Database preparation error\")\n    })?;\n\n    // Query the specific user based on their UUID\n    let mut iter = session\n        .execute_iter(insert_query, &(inputdata.id,)) // TODO: Edit this\n        .await\n        .map_err(|e| {\n            error!(\"DATABASE Code: Database query failed: {}\", e);\n            anyhow!(\"Database query failed\")\n        })?\n        .into_typed::<UserDatabase>(); // TODO: Edit this\n\n    let mut response_data_json = Vec::new();\n\n    // Fetch and print the user data\n    while let Some(read_row) = iter.try_next().await.map_err(|e| {\n        error!(\"DATABASE Code: Error fetching data: {}\", e);\n        anyhow!(\"Error fetching data\")\n    })? {\n        let json_value = UserResponse { // TODO: Edit this\n            user_id: read_row.user_id.to_string(),\n            first_name: read_row.first_name,\n            last_name: read_row.last_name,\n            email: read_row.email,\n            phone: read_row.phone,\n            address: read_row.address,\n            shipping_address: read_row.shipping_address,\n            date_of_birth: read_row\n                .date_of_birth\n                .and_then(|d| d.0.try_into().ok())\n                .map(format_date),\n            passwordv: read_row.passwordv,\n            salt: read_row.salt,\n            role: read_row.role,\n            is_active: read_row.is_active,\n            last_login: format_timestamp(read_row.last_login.0),\n            created_at: format_timestamp(read_row.created_at.0),\n            updated_at: format_timestamp(read_row.updated_at.0),\n        };\n\n        response_data_json.push(json!(json_value));\n    }\n\n\t// Uncomment if need get error when no data\n\n    //if response_data_json.is_empty() {\n    //    bail!(\"Data not found\");\n    //}\n\n    // Return the JSON string\n    Ok(Json(json!(response_data_json)))\n}","language":".rs","children":[],"resolveSyntax":false,"description":"INDRA - Rust Axum Query Select Funtion Code","prefix":""},{"id":44,"parentId":3,"label":"RSQSessionSelect","value":"let session_select: Session = get_db_select().await.map_err(|err| {\n    error!(\"Database select session error: {}\", err);\n    anyhow!(\"Database select session error\")\n})?;\n","language":".rs","children":[]},{"id":45,"parentId":3,"label":"RSQSessionModify","value":"let session_modify = get_db_modify().await.map_err(|err| {\n    error!(\"Database modify session error: {}\", err);\n    anyhow!(\"Database modify session error\")\n})?;","language":".rs","children":[]},{"id":46,"parentId":3,"label":"RSQSelect","value":"let query = \"SELECT user_id, fake_uuid, code, verifyit, expires_in\n             FROM users.verifyit WHERE fake_uuid = ?;\";\n\nlet prepared_query: PreparedStatement = session_select.prepare(query).await.map_err(|err| {\n    error!(\"Query preparation error: {}\", err);\n    anyhow!(\"Database preparation error\")\n})?;\n\n// Query the specific user based on their UUID\nlet mut iter = session_select\n    .execute_iter(prepared_query, &(fake_uuid,))\n    .await\n    .map_err(|e| {\n        error!(\"DATABASE Code: Database query failed: {}\", e);\n        anyhow!(\"Database query failed\")\n    })?\n    .rows_stream::<VerifyitDatabase>()?;\n\nlet mut response_data_json = Vec::new();\n\nwhile let Some(read_row) = iter.try_next().await.map_err(|e| {\n    error!(\"DATABASE Code: Error fetching data: {}\", e);\n    anyhow!(\"Error fetching data\")\n})? {\n    let json_value = VerifyitResponse {\n        user_id: read_row.user_id,\n        fake_uuid: read_row.fake_uuid,\n        code: read_row.code,\n        verifyit: read_row.verifyit,\n        expires_in: format_timestamp(read_row.expires_in.0),\n    };\n\n    response_data_json.push(json!(json_value));\n}\n\nif response_data_json.is_empty() {\n    bail!(\"Data not found\");\n}\n\n// Return the JSON string\nOk(Json(json!(response_data_json)))","language":".rs","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":47,"parentId":3,"label":"t","value":"// TODO: ","language":".rs","children":[]}]},{"id":9,"parentId":1,"label":"JS Snippets","folder":true,"children":[{"id":63,"parentId":9,"label":"Tanstack Form","folder":true,"children":[{"id":36,"parentId":63,"label":"TSFImports","value":"import { createForm } from \"@tanstack/solid-form\";\nimport { valibotValidator } from \"@tanstack/valibot-form-adapter\";\nimport * as v from \"valibot\";\nimport FieldInfo from \"../modules/Fieldinfo\";\nimport { ILoading } from \"../modules/SVGImg\";","language":".jsx","children":[],"resolveSyntax":false},{"id":22,"parentId":63,"label":"TSFToggle","value":"<form.Field\n    name=\"${1:name}\"\n    validators={{\n      onChange: v.pipe(\n        v.boolean(),\n        v.literal(true, \"You must accept the terms and conditions\")\n      ),\n    }}\n    children={(field) => (\n      <Toggle\n        label={\n          <>\n            ${2:I accept the terms and conditions}{\" \"}\n            <a href=\"/terms\" class=\"text-blue-600 hover:underline\">\n              View Terms\n            </a>\n          </>\n        }\n        color=\"${4|blue,red,green,purple,teal,yellow,orange|}\"\n        ${5:required}\n        name={field().name}\n        id={field().name}\n        disabled={field().form.state.isSubmitting}\n        onBlur={field().handleBlur}\n        checked={field().state.value}\n        onClick={(e) => field().handleChange(e.target.checked)}\n        status={\n          field().state.meta.errors.length > 0\n            ? \"error\"\n            : field().state.value !== undefined &&\n              field().state.value !== null &&\n              field().state.value\n            ? \"ok\"\n            : \"\"\n        }\n      >\n        <FieldInfo field={field()} />\n      </Toggle>\n    )}\n  />","language":".jsx","children":[]},{"id":21,"parentId":63,"label":"TSFRadio","value":"<form.Field\n    name=\"${1:name}\"\n    validators={{\n      onChange: v.pipe(\n        v.boolean(),\n        v.literal(true, \"You must accept the terms and conditions\")\n      ),\n    }}\n    children={(field) => (\n      <Radio\n        label={\n          <>\n            ${2:I accept the terms and conditions}{\" \"}\n            <a href=\"/terms\" class=\"text-blue-600 hover:underline\">\n              View Terms\n            </a>\n          </>\n        }\n        helper=\"${3:helper}\"\n        color=\"${4|blue,red,green,purple,teal,yellow,orange|}\"\n        ${5:required}\n        name={field().name}\n        id={field().name}\n        disabled={field().form.state.isSubmitting}\n        onBlur={field().handleBlur}\n        checked={field().state.value}\n        onClick={(e) => field().handleChange(e.target.checked)}\n        status={\n          field().state.meta.errors.length > 0\n            ? \"error\"\n            : field().state.value !== undefined &&\n              field().state.value !== null &&\n              field().state.value\n            ? \"ok\"\n            : \"\"\n        }\n      >\n        <FieldInfo field={field()} />\n      </Radio>\n    )}\n  />","language":".jsx","children":[],"resolveSyntax":false},{"id":20,"parentId":63,"label":"TSFNumberinput","value":"<form.Field\n    name=\"${1:name}\"\n    validators={{\n      onChange: v.pipe(\n        v.number(\"Please enter a valid age.\"),\n        v.minValue(${3:0}, \"You must be at least 18 years old.\"),\n        v.maxValue(${4:20}, \"Please enter a valid age.\")\n      ),\n    }}\n    children={(field) => (\n      <InputNumber\n        value={field().state.value}\n        label=\"${2:label}\"\n        name={field().name}\n        id={field().name}\n        min={${3:0}}\n        max={${4:20}}\n        unit=\"${5:unit}\"\n        size=\"${6|small,_|}\"\n        disabled={field().form.state.isSubmitting}\n        required\n        onBlur={field().handleBlur}\n        onInput={(e) =>\n          field().handleChange(Number(e.target.value))\n        }\n        status={\n          field().state.meta.errors.length > 0\n            ? \"error\"\n            : field().state.value !== undefined &&\n              field().state.value !== null &&\n              field().state.value\n            ? \"ok\"\n            : \"\"\n        }\n      >\n        <FieldInfo field={field()} />\n      </InputNumber>\n    )}\n  />","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":19,"parentId":63,"label":"TSFFileinput","value":"<form.Field\n    name=\"${1:name}\"\n    validators={{\n      onChange: v.pipe(\n        v.file(\"${10:Please select an image file.}\"),\n        v.mimeType(\n          [\"${6|image/jpeg,image/png|}\"],\n          \"${7:Please select a JPEG or PNG file}\"\n        ),\n        v.maxSize(\n          ${8:1024 * 1024 * 10},\n          \"${9:Please select a file smaller than 10 MB}\"\n        )\n      ),\n    }}\n    children={(field) => (\n      <InputFile\n        label=\"${2:label}\"\n        id={field().name}\n        type=\"${3|file,zone|}\"\n        ${4:required}\n        size=\"${5|small,base,large|}\"\n        disabled={field().form.state.isSubmitting}\n        accept=\"${6|image/jpeg,image/png|}\"\n        onInput={(e) =>\n          field().handleChange(\n            e.target.files ? e.target.files[0] : undefined\n          )\n        }\n        status={\n          field().state.meta.errors.length > 0\n            ? \"error\"\n            : field().state.value !== undefined &&\n              field().state.value !== null &&\n              field().state.value\n            ? \"ok\"\n            : \"\"\n        }\n      >\n        <FieldInfo field={field()} />\n      </InputFile>\n    )}\n  />","language":".jsx","children":[],"resolveSyntax":false},{"id":18,"parentId":63,"label":"TSFTextArea","value":"<form.Field\n  name=\"${1:name}\"\n  validators={{\n    onChange: v.pipe(\n      v.string(\"Please enter your details\"),\n      v.minLength(1, \"Please enter your details\"),\n      v.maxLength(100, \"Details is too long\")\n    ),\n  }}\n  children={(field) => (\n    <TextArea\n      value={field().state.value}\n      label=\"${2:label}\"\n      size=\"${3|vsmall,small,base,large|}\"\n      id={field().name}\n      name={field().name}\n      placeholder=\"${4:placeholder}\"\n      disabled={field().form.state.isSubmitting}\n      ${5:required}\n      onBlur={field().handleBlur}\n      onInput={(e) => field().handleChange(e.target.value)}\n      status={\n        field().state.meta.errors.length > 0\n          ? \"error\"\n          : field().state.value !== undefined &&\n            field().state.value !== null &&\n            field().state.value\n          ? \"ok\"\n          : \"\"\n      }\n    >\n      <FieldInfo field={field()} />\n    </TextArea>\n  )}\n/>","language":".jsx","children":[]},{"id":17,"parentId":63,"label":"TSFSelect","value":"<form.Field\n    name=\"${1:name}\"\n    validators={{\n      onChange: v.pipe(\n        v.string(\"Must be a valid selection\"),\n        v.minLength(1, \"Please select an option\"),\n        v.picklist(\n          ${5:data}.map((item) => item.value),\n          \"Invalid selection\"\n        )\n      ),\n    }}\n    children={(field) => (\n      <>\n        <Select\n          id={field().name}\n          name={field().name}\n          value={field().state.value}\n          onblur={() => field().handleBlur}\n          onInput={(e) => field().handleChange(e.target.value)}\n          status={\n            field().state.meta.errors.length > 0\n              ? \"error\"\n              : field().state.value !== undefined &&\n                field().state.value !== null &&\n                field().state.value\n              ? \"ok\"\n              : \"\"\n          }\n          label=\"${2:label}\"\n          size=\"${3|vsmall,small,base,large|}\"\n          ${4:required}\n          data={${5:data}}\n          disabled={field().form.state.isSubmitting}\n        >\n          <FieldInfo field={field()} />\n        </Select>\n      </>\n    )}\n  />","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":16,"parentId":63,"label":"TSFStatus","value":"<form.Subscribe\n    selector={(state) => ({\n      canSubmit: state.canSubmit,\n      isSubmitting: state.isSubmitting,\n      submitted: state.submitted,\n      submissionAttempts: state.submissionAttempts,\n      isValidating: state.isValidating,\n      isValid: state.isValid,\n      isFieldsValid: state.isFieldsValid,\n      isFieldsValidating: state.isFieldsValidating,\n      isTouched: state.isTouched,\n      isPristine: state.isPristine,\n      isDirty: state.isDirty,\n    })}\n    children={(state) => {\n      return (\n        <>\n          <div>Submit Count:{state().submissionAttempts}</div>\n          <div>\n            Submitting:{state().isSubmitting === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            Submitted:{state().submitted === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            Validating:{state().isValidating === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>Valid:{state().isValid === true ? \"Yes\" : \"No\"}</div>\n          <div>\n            FormValidating:\n            {state().isFormValidating === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            FormValid:{state().isFormValid === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            FieldsValidating:\n            {state().isFieldsValidating === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            FieldsValid:\n            {state().isFieldsValid === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            Touched:\n            {state().isTouched === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            Pristine:\n            {state().isPristine === true ? \"Yes\" : \"No\"}\n          </div>\n          <div>\n            Dirty:\n            {state().isDirty === true ? \"Yes\" : \"No\"}\n          </div>\n        </>\n      );\n    }}\n  />","language":".jsx","children":[]},{"id":15,"parentId":63,"label":"TSFButton","value":"<form.Subscribe\n    selector={(state) => ({\n      canSubmit: state.canSubmit,\n      isSubmitting: state.isSubmitting,\n    })}\n    children={(state) => {\n      return (\n        <Button\n          color=\"${1|Blue,Alternative,Dark,Light,Green,Red,Yellow,Purple,BlueRound,BlueWhite,BlueColoredShadow,BlueOutline,facebook,twitter,google,link,icon,round|}\"\n          type=\"${2|button,submit,reset|}\"\n          size=\"${3|esmall,small,base,large,elarge|}\"\n          disabled={!state().canSubmit}\n        >\n          {state().isSubmitting ? (\n            <>\n              <ILoading class=\"w-4 h-4 text-white me-2\" /> Wait..\n            </>\n          ) : \"${4:Button Text}\"}\n        </Button>\n      );\n    }}\n  />","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":14,"parentId":63,"label":"TSFCheckbox","value":"<form.Field\n    name=\"${1:name}\"\n    validators={{\n      onChange: v.pipe(\n        v.boolean(),\n        v.literal(true, \"You must accept the terms and conditions\")\n      ),\n    }}\n    children={(field) => (\n      <Checkbox\n        label={\n          <>\n            ${2:I accept the terms and conditions}{\" \"}\n            <a href=\"/terms\" class=\"text-blue-600 hover:underline\">\n              View Terms\n            </a>\n          </>\n        }\n        helper=\"${3:helper}\"\n        color=\"${4|blue,red,green,purple,teal,yellow,orange|}\"\n        ${5:required}\n        name={field().name}\n        id={field().name}\n        disabled={field().form.state.isSubmitting}\n        onBlur={field().handleBlur}\n        checked={field().state.value}\n        onClick={(e) => field().handleChange(e.target.checked)}\n        status={\n          field().state.meta.errors.length > 0\n            ? \"error\"\n            : field().state.value !== undefined &&\n              field().state.value !== null &&\n              field().state.value\n            ? \"ok\"\n            : \"\"\n        }\n      >\n        <FieldInfo field={field()} />\n      </Checkbox>\n    )}\n  />","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":13,"parentId":63,"label":"TSFText","value":"<form.Field\n  name=\"${1:fieldname}\"\n  validators={{\n    onChange: v.pipe(\n      v.string(\"Your email must be a string\"),\n      v.minLength(1, \"Please enter your email\"),\n      v.email(\"The email address is badly formatted\"),\n      v.maxLength(100, \"Email address is too long\"),\n      v.regex(/[a-z]/, \"Your password must contain a lowercase letter\"),\n      v.trim()\n    ),\n  }}\n  children={(field) => (\n    <Input\n      value={field().state.value}\n      label=\"${2:label}\"\n      type=\"${3|text,tel,url,number,email,password|}\"\n      name={field().name}\n      id={field().name}\n      placeholder=\"${4:placeholder}\"\n      iconname=\"${5|search,password,email,user|}\"\n      disabled={field().form.state.isSubmitting}\n      ${6:required}\n      onBlur={field().handleBlur}\n      onInput={(e) => field().handleChange(e.target.value)}\n      status={\n        field().state.meta.errors.length > 0\n          ? \"error\"\n          : field().state.value !== undefined &&\n            field().state.value !== null &&\n            field().state.value\n          ? \"ok\"\n          : \"\"\n      }\n    >\n      <FieldInfo field={field()} />\n    </Input>\n  )}\n/>","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":12,"parentId":63,"label":"TSFFieldInfo","value":"function FieldInfo(props) {\n  return (\n    <>\n      {props.field.state.meta.isTouched &&\n      props.field.state.meta.errors.length ? (\n        <em>{props.field.state.meta.errors.join(\",\")}</em>\n      ) : null}\n      {props.field.state.meta.isValidating ? \"Validating...\" : null}\n    </>\n  );\n}\n","language":".jsx","children":[]},{"id":11,"parentId":63,"label":"TSFForm","value":"<form\n  noValidate\n  class=\"space-y-4\"\n  data-astro-reload\n  onSubmit={(e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    ${1:form}.handleSubmit();\n  }}\n>\n  {/* Add feilds for form */}\n  ${2:form_feilds}\n{timeLeft() > 0 && <p>Please wait: {timeLeft()} seconds</p>}\n</form>","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":27,"parentId":63,"label":"TSFCreateWOTime","value":"const ${1:form} = createForm(() => ({\n    defaultValues: {\n      ${2:form_default_values},\n    },\n    onSubmit: async ({ value, formApi }) => {\n      // Do something with form data\n\n      if (\n        formApi.state.isValid === true &&\n        formApi.state.isTouched === true &&\n        formApi.state.submissionAttempts < 16\n      ) {\n        // API Call and submit handler code\n        console.log(\"Form Submit:\", value);\n      } else {\n        console.error(\"More than 16 times tried\");\n      }\n    },\n    onSubmitInvalid: (values, formApi) => {\n      // console.log(\"Invalid Submit\");\n    },\n  }));","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":10,"parentId":63,"label":"TSFCreate","value":"const [timeLeft, setTimeLeft] = createSignal(0);\nlet intervalId;\n\nconst startCountdown = () => {\n  intervalId = setInterval(() => {\n    setTimeLeft((prevTime) => prevTime - 1);\n  }, 1000);\n};\n\nconst resetCountdown = () => {\n  clearInterval(intervalId);\n};\n\nonCleanup(() => clearInterval(intervalId));\n\nconst ${1:form} = createForm(() => ({\n  defaultValues: {\n    ${2:form_default_values}\n  },\n  onSubmit: async ({ value, formApi }) => {\n    // Do something with form data\n\n    if (\n      formApi.state.isValid === true &&\n      formApi.state.isTouched === true &&\n      formApi.state.submissionAttempts < 16\n    ) {\n      // API Call and submit handler code\n      console.log(\"Form Submit:\", value);\n\n      const APIRFail = true;\n\n      if (formApi.state.submissionAttempts > 6 && APIRFail) {\n        resetCountdown();\n        setTimeLeft(formApi.state.submissionAttempts ** 2);\n        startCountdown();\n        while (timeLeft() > 0) {\n          await new Promise((resolve) => setTimeout(resolve, 100)); // Wait for 100 milliseconds\n        }\n      }\n    } else {\n      console.error(\"More than 16 times tried\");\n    }\n  },\n  onSubmitInvalid: (values, formApi) => {\n    // console.log(\"Invalid Submit\");\n    if (formApi?.state?.submissionAttempts > 6) {\n      resetCountdown();\n      setTimeLeft(Math.pow(formApi.state.submissionAttempts, 2));\n      startCountdown();\n    }\n  },\n}));","language":".jsx","children":[],"resolveSyntax":false,"description":"Tanstack Form Create","prefix":""},{"id":67,"parentId":63,"label":"TSFFForm","value":"<Form form={${1:tanstack_form_object}} class=\"\">\n  ${2:Add ALL FORM COMPONENTS HERE}\n</Form>","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":68,"parentId":63,"label":"TSFFStateSubscription","value":"<FormStateSubscription />","language":".jsx","children":[]},{"id":69,"parentId":63,"label":"TSFFImport","value":"import Form, {\n  FormButton,\n  FormCheckbox,\n  FormFileInput,\n  FormInput,\n  FormNumberInput,\n  FormRadio,\n  FormStateSubscription,\n  FormSelect,\n} from \"../components/ui/tsform\";\nimport { createForm } from \"@tanstack/solid-form\";\nimport * as v from \"valibot\";","language":".jsx","children":[]},{"id":70,"parentId":63,"label":"TSFFInput","value":"<FormInput name=\"${1:fieldname}\" validators={{ onChange: ${7:ValibotValidator} }} label=\"${2:label}\" type=\"${3|text,tel,url,number,email,password|}\" placeholder=\"${4:placeholder}\" required={${5|true,false|}} iconname=\"${6|search,password,email,user|}\"/>","language":".jsx","children":[],"resolveSyntax":false},{"id":71,"parentId":63,"label":"TSFFButton","value":"<FormButton color=\"${1|Blue,Alternative,Dark,Light,Green,Red,Yellow,Purple,BlueRound,BlueWhite,BlueColoredShadow,BlueOutline,facebook,twitter,google,link,icon,round|}\" type=\"${2|button,submit,reset|}\" size=\"${3|esmall,small,base,large,elarge|}\" loadicon={\"\"} loadtext=\"\">${4:Button Text}</FormButton>","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":72,"parentId":63,"label":"TSFFCheckbox","value":"<FormCheckbox name=\"${1:name}\" color=\"${2|blue,red,green,purple,teal,yellow,orange|}\" label={<>${6:labelcode}</>} helper=\"${3:helper}\" required={${4|true,false|}} validators={{ onChange: ${5:valibotcode} }} />","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":75,"parentId":63,"label":"TSFFFileInput","value":"<FormFileInput name=\"${1:name}\" validators={{\n      onChange: v.pipe(\n        v.file(\"${11:Please select an image file.}\"),\n        v.mimeType(\n          [\"${6|image/jpeg,image/png|}\"],\n          \"${8:Please select a JPEG or PNG file}\"\n        ),\n        v.maxSize(\n          ${9:1024 * 1024 * 10},\n          \"${10:Please select a file smaller than 10 MB}\"\n        )\n      ),\n    }} label=\"${2:label}\" type=\"${3|file,zone|}\" required={${4|true,false|}} size=\"${5|small,base,large|}\" accept=\"${6|image/jpeg,image/png|}\" multiple={${7|true,false|}} />","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":76,"parentId":63,"label":"TSFFNumberInput","value":"<FormNumberInput name=\"${1:name}\" validators={{onChange: ${8:validatorcode}}} label=\"${2:label}\" min={${3:0}} max={${4:20}} unit=\"${5:unit}\" size=\"${6|small,_|}\" required={${7|true,false|}}/>","language":".jsx","children":[]},{"id":77,"parentId":63,"label":"TSFFRadio","value":"<FormRadio name=\"${1:name}\" label={<>${2:label}</>} validators={{onChange:${6:validatorcode}}} helper=\"${3:helper}\" color=\"${4|blue,red,green,purple,teal,yellow,orange|}\" required={${5|true,false|}} />","language":".jsx","children":[]},{"id":78,"parentId":63,"label":"TSFFSelect","value":"<FormSelect name=\"${1:name}\" validators={{onChange: ${6:validatorcode}}}  label=\"${2:label}\" size=\"${3|vsmall,small,base,large|}\" required={${4|true,false|}} data={${5:data}} />","language":".jsx","children":[]}]},{"id":66,"parentId":9,"label":"Tanstack Table","folder":true,"children":[{"id":37,"parentId":66,"label":"TSTTable","value":"<Table\n  data={${1:data1()}}\n  footer={${2|true,false|}}\n  pagination={${3|true,false|}}\n  sort={${4|true,false|}}\n  gfilter={${5|true,false|}}\n  gfilterlabel=\"${6:Search}\"\n  gfilterplaceholder=\"${7:Search}\"\n  cfilter={${8|true,false|}}\n  id=\"${9:table}\"\n  select={${10|true,false|}}\n  selectcolor=\"${|blue,red,green,purple,teal,yellow,orange|}\"\n  cdisplay={${12|true,false|}}\n  striped={${13|true,false|}}\n  expand={${14|true,false|}}\n  expanded={${15|true,false|}}\n  getTableObject={${16:handleTableObject1}}\n  columns={[\n    {\n      accessorKey: \"${17:gatewayIP}\",\n      header: \"${18:Gateway IP}\"\n    },\n    {\n      accessorKey: \"${19:deviceID}\",\n      header: \"${20:Device ID}\",\n    },\n    {\n      accessorKey: \"${21:deviceName}\",\n      header: \"${22:Device Name}\",\n    },\n    {\n      accessorKey: \"${23:deviceType}\",\n      header: \"${24:Device Type}\",\n    },\n    {\n      accessorKey: \"${25:devicelocation}\",\n      header: \"${26:Location}\",\n    },\n    {\n      accessorKey: \"${27:devicestatus}\",\n      header: \"${28:Status}\",\n    },\n    {\n      header: \"${29:Edit}\",\n      cell: (row) => (\n        <div class=\"flex justify-center\">\n          <Button\n            color=\"${30:BlueWhite}\"\n            size=\"${31:esmall}\"\n            onclick={() => {\n              return ${32:formmesure}.reset({\n                gatewayip: row.row.original.${17:gatewayIP},\n                deviceid: row.row.original.${19:deviceID},\n                devicename: row.row.original.${21:deviceName},\n                devicetype: row.row.original.${23:deviceType},\n                devicelocation: row.row.original.${25:devicelocation},\n                devicestatus: row.row.original.${27:devicestatus},\n                duuid: row.row.original.${33:deviceUUID},\n              });\n            }}\n          >\n            ${29:Edit}\n          </Button>\n        </div>\n      ),\n    },\n  ]}\n/>","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":35,"parentId":66,"label":"TSTObject","value":"const handleTableObject1 = (tableObject) => {\n  //   // Now you have access to the table object\n  console.log(tableObject.getState().rowSelection);\n  console.log(tableObject.getSelectedRowModel().rows);\n  console.log(tableObject.getFilteredSelectedRowModel().rows);\n  console.log(tableObject.getGroupedSelectedRowModel().rows);\n  console.log(tableObject.getGroupedSelectedRowModel().flatRows);\n  console.log(tableObject.getGroupedSelectedRowModel().flatRows); // Get flatRows.original values to get acctural values\n  // console.log(tableObject.setGlobalFilter(\"aa\"));\n  // console.log(tableObject.setPageSize(100));\n};","language":".jsx","children":[]}]},{"id":64,"parentId":9,"label":"Tanstack Query","folder":true,"children":[{"id":62,"parentId":64,"label":"TSQPostReset","value":"() => ${1:datapost}.reset()","language":".jsx","children":[],"resolveSyntax":false},{"id":61,"parentId":64,"label":"TSQPostMutateLong","value":"${1:datapost}.mutate(${2:value},\n  {\n    onError: (error, variables, context) => {\n      // An error happened!\n      console.log(`rolling back optimistic update with id ${context.id}`)\n    },\n    onSuccess: (data, variables, context) => {\n      // Boom baby!\n    },\n    onSettled: (data, error, variables, context) => {\n      // Error or success... doesn't matter!\n    },\n  }\n);","language":".jsx","children":[],"resolveSyntax":false},{"id":60,"parentId":64,"label":"TSQPostMutate","value":"${1:datapost}.mutate(${2:value});","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":59,"parentId":64,"label":"TSQGetRefetch","value":"${1:dataget}.refetch();","language":".jsx","children":[]},{"id":58,"parentId":64,"label":"TSQCancel","value":"// import { useQueryClient } from \"@tanstack/solid-query\"; <--- Remove if import\n// const queryClient = useQueryClient() <--- Remove if set\nqueryClient.cancelQueries({ queryKey: ['${1:queryKey}'] }) // When Cancel Query, it will cancel fetching data from server.","language":".jsx","children":[]},{"id":57,"parentId":64,"label":"TSQSetData","value":"// import { useQueryClient } from \"@tanstack/solid-query\"; <--- Remove if import\n// const queryClient = useQueryClient() <--- Remove if set\nqueryClient.setQueryData(['${1:queryKey}'], ${2:data}) // When Set Query Data, it will update data in cache.","language":".jsx","children":[]},{"id":56,"parentId":64,"label":"TSQInvalidate","value":"// import { useQueryClient } from \"@tanstack/solid-query\"; <--- Remove if import\n// const queryClient = useQueryClient() <--- Remove if set\nqueryClient.invalidateQueries({ queryKey: ['${1:queryKey}'] }) // When Invalidate Query, it will refetch data from server.","language":".jsx","children":[]},{"id":55,"parentId":64,"label":"TSQPostOptimisticLong","value":"const ${1:datapost} = FetchPost({\n  url: \"${3:url}\",\n  mutationKey: [\"${2:mutationKey}\"],\n  params: {\n    Hello: \"Hey\",\n  },\n  gcTime: 1000 * 60 * 5, // Garbage collector in mili seconds - Defult 5 minitues (1000 * 60 * 5) - number | Infinity (24h)\n  retry: false, // Default true - boolean | number\n  retryDelay: false, // Default 1000 - 0s to 30s - In mili seconds - number | false\n  networkMode: online, // Default online - 'online' | 'always' | 'offlineFirst'\n  onSuccess: (data, variables, context) => {\n    // I will fire first\n    // queryClient.setQueryData(['todo'], data) // This method no need refetch data from server. Cache update with new data. Also no need to invalidateQueries to again fetch.\n  },\n  onError: (error, variables, context) => {\n    // I will fire first\n  },\n  // When mutate is called:\n  onMutate: async (newTodo) => {\n    // Cancel any outgoing refetches\n    // (so they don't overwrite our optimistic update)\n    await queryClient.cancelQueries({ queryKey: ['todos'] })\n\n    // Snapshot the previous value\n    const previousTodos = queryClient.getQueryData(['todos'])\n\n    // Optimistically update to the new value\n    queryClient.setQueryData(['todos'], (old) => [...old, newTodo])\n\n    // Return a context object with the snapshotted value\n    return { previousTodos }\n  },\n  // If the mutation fails,\n  // use the context returned from onMutate to roll back\n  onError: (err, newTodo, context) => {\n    queryClient.setQueryData(['todos'], context.previousTodos)\n  },\n  // Always refetch after error or success:\n  onSettled: () => queryClient.invalidateQueries({ queryKey: ['todos'] }),\n})","language":".jsx","children":[]},{"id":54,"parentId":64,"label":"TSQPostOptimistic","value":"const ${1:datapost} = FetchPost({\n  url: \"${3:url}\",\n  mutationKey: [\"${2:mutationKey}\"],\n  params: {\n    Hello: \"Hey\",\n  },\n  // When mutate is called:\n  onMutate: async (newTodo) => {\n    // Cancel any outgoing refetches\n    // (so they don't overwrite our optimistic update)\n    await queryClient.cancelQueries({ queryKey: ['todos'] })\n\n    // Snapshot the previous value\n    const previousTodos = queryClient.getQueryData(['todos'])\n\n    // Optimistically update to the new value\n    queryClient.setQueryData(['todos'], (old) => [...old, newTodo])\n\n    // Return a context object with the snapshotted value\n    return { previousTodos }\n  },\n  // If the mutation fails,\n  // use the context returned from onMutate to roll back\n  onError: (err, newTodo, context) => {\n    queryClient.setQueryData(['todos'], context.previousTodos)\n  },\n  // Always refetch after error or success:\n  onSettled: () => queryClient.invalidateQueries({ queryKey: ['todos'] }),\n})","language":".jsx","children":[]},{"id":53,"parentId":64,"label":"TSQPostLong","value":"const ${1:datapost} = FetchPost({\n  url: \"${3:url}\",\n  mutationKey: [\"${2:mutationKey}\"],\n  params: {\n    Hello: \"Hey\",\n  },\n  gcTime: 1000 * 60 * 5, // Garbage collector in mili seconds - Defult 5 minitues (1000 * 60 * 5) - number | Infinity (24h)\n  retry: false, // Default 3 - boolean | number\n  retryDelay: false, // Default 1000 - 0s to 30s - In mili seconds - number | false\n  networkMode: online, // Default online - 'online' | 'always' | 'offlineFirst'\n  onSuccess: (data, variables, context) => {\n    // I will fire first\n    // queryClient.setQueryData(['todo'], data) // This method no need refetch data from server. Cache update with new data. Also no need to invalidateQueries to again fetch.\n  },\n  onError: (error, variables, context) => {\n    // I will fire first\n  },\n  onSettled: (data, error, variables, context) => {\n    // I will fire first\n  },\n})","language":".jsx","children":[]},{"id":52,"parentId":64,"label":"TSQPost","value":"const ${1:datapost} = FetchPost({\n  url: \"${3:url}\",\n  mutationKey: [\"${2:mutationKey}\"],\n  params: {\n    Hello: \"Hey\",\n  },\n})","language":".jsx","children":[]},{"id":51,"parentId":64,"label":"TSQGetLong","value":"const ${1:dataget} = FetchGet({\n  url: \"${3:url}\",\n  queryKey: [\"${2:queryKey}\"],\n  params: { Hello: 'Hey'},\n  enabled: true, // Default true - boolean | enabled()\n  refetchOnMount: true, // Default true - boolean\n  staleTime: 1000 * 60 * 5, // Defult 0\n  gcTime: 1000 * 60 * 5, // Garbage collector in mili seconds - Defult 5 minitues (1000 * 60 * 5) - number | Infinity (24h)\n  refetchOnWindowFocus: true, // Default true - boolean | \"always\"\n  refetchOnReconnect: true, // Default true - boolean | \"always\"\n  refetchInterval: false, // Default false - In mili seconds - number | false\n  retry: false, // Default 3 - boolean | number\n  retryDelay: false, // Default 1000 - 0s to 30s - In mili seconds - number | false\n  networkMode: online, // Default online - 'online' | 'always' | 'offlineFirst'\n  initialData: () => queryClient.getQueryData([\"devices\"]),\n  initialDataUpdatedAt: () =>\n    queryClient.getQueryState([\"devices\"])?.dataUpdatedAt,\n})","language":".jsx","children":[]},{"id":50,"parentId":64,"label":"TSQGet","value":"const ${1:dataget} = FetchGet({\n  url: \"${3:url}\",\n  queryKey: [\"${2:queryKey}\"],\n  params: { Hello: 'Hey'},\n  enabled: true, // Default true - boolean | enabled()\n  refetchOnMount: true, // Default true - boolean\n})","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""}]},{"id":65,"parentId":9,"label":"SolidJS","folder":true,"children":[{"id":48,"parentId":65,"label":"SJCard","value":"<div class=\"p-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700\">\n  {/* Add Things Here */}\n</div>","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":42,"parentId":65,"label":"SJBadge","value":"<Badge\n  color=${1|default,dark,red,green,yellow,indigo,purple,pink|}\n  size=${2|xs,sm|}\n  bordered={${3|true,false|}}\n  rounded={${4|true,false|}}\n  class=${5:custom-class}\n  role=${6:status}\n  id=${7:unique-id}\n  aria-label=${8:Label}\n>\n  ${9:Badge Content}\n</Badge>","language":".jsx","children":[]},{"id":41,"parentId":65,"label":"SJAlert","value":"<Alert\n  type=${1|info,danger,success,warning,dark|}\n  withIcon={${2|true,false|}}\n  bordered={${3|true,false|}}\n  dismissible={${4|true,false|}}\n  title=${5:Alert Title}\n  class=${6:custom-class}\n  role=${7:alert}\n  onDismiss={${8:() => {}}}\n>\n  ${9:Alert Content}\n</Alert>","language":".jsx","children":[]},{"id":40,"parentId":65,"label":"SJLink","value":"<Link\n  href=${1:/path/to/somewhere}\n  color=${2|Link,Paralink,Blue,Alternative,Dark,Light,Green,Red,Yellow,Purple,BlueRound,BlueWhite,BlueColoredShadow,BlueOutline|}\n  target=${3|_self,_blank,_parent,_top|}\n  class=${4:custom-class}\n  size=${5|base,esmall,small,large,elarge|}\n  title=${6:Tooltip text}\n  rel=${7:noreferrer}\n  disabled={${8|true,false|}}\n  onClick={${9:() => {}}}\n  onMouseEnter={${10:() => {}}}\n  onMouseLeave={${11:() => {}}}\n  onFocus={${12:() => {}}}\n  onBlur={${13:() => {}}}\n>\n  ${14:Link Text or Elements}\n</Link>","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":39,"parentId":65,"label":"SJTextInput","value":"<Inputs\n  id=\"${1:input-id}\"\n  type=\"${2|text,password,email,search,number,tel,url|}\"\n  size=\"${3|vsmall,small,base,large|}\"\n  status=\"${4|normal,error,ok|}\"\n  label=\"${5:Your Label}\"\n  iconname=\"${6|search,password,email,user|}\"\n  class=\"${7:custom-class}\"\n  endbtn=${8|true,false|}\n  endbtnlabel=\"${9:Button}\"\n  endbtnprops={{\n    type: \"${10:button}\",\n    onClick: ${11:() => console.log(\"Clicked\")}\n  }}\n  placeholder=\"${12:Enter text here}\"\n  required=${13|true,false|}\n  disabled=${14|true,false|}\n  readonly=${15|true,false|}\n  value=\"${16:defaultValue}\"\n  onChange=${17:(e) => console.log(\"Changed:\", e.target.value)}\n  onInput=${18:(e) => console.log(\"Input:\", e.target.value)}\n  onFocus=${19:(e) => console.log(\"Focused\")}\n  onBlur=${20:(e) => console.log(\"Blurred\")}\n>\n  ${21:Helper or error text here}\n</Inputs>","language":".jsx","children":[]},{"id":38,"parentId":65,"label":"SJButton","value":"<Button\n  color=\"${1|Blue,Alternative,Dark,Light,Green,Red,Yellow,Purple,BlueRound,BlueWhite,BlueColoredShadow,BlueOutline,facebook,twitter,google,link,icon,round|}\"\n  size=\"${2|esmall,small,base,large,elarge|}\"\n  icon=\"${3|facebook,twitter,google,dotv,doth|}\"\n  dropdown=\"${4|left,top,right,bottom|}\"\n  class=\"${5:!text-xs}\"\n  onClick={() => ${6:handleClick()}}\n>\n  ${8:Submit}\n</Button>","language":".jsx","children":[]},{"id":23,"parentId":65,"label":"SJSNewPage","value":"// TODO:\n\n// ##################################################################################\n\nimport TanstackProvider from \"../../common/TanstackProvider\";\n\nfunction ${1:Main_Funtion_Name}() {\n  return (\n    <>\n      <h1>${1:Main_Funtion_Name} Page</h1>\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <TanstackProvider>\n      <${1:Main_Funtion_Name} />\n    </TanstackProvider>\n  );\n}","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":24,"parentId":65,"label":"SJSGetURL","value":"const [urlParam, setUrlParam] = createSignal(\"\");\n\n  onMount(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const newValue = searchParams.get(\"x\") || \"\";\n    setUrlParam(newValue);\n  });","language":".jsx","children":[],"resolveSyntax":false}]},{"id":28,"parentId":9,"label":"Valibot","folder":true,"children":[{"id":29,"parentId":28,"label":"VBSelect","value":"v.pipe(\n\tv.string(\"Must be a valid selection\"),\n\tv.minLength(1, \"Please select an option\"),\n\tv.picklist(\n\t\tgatewaystatusdata.map((item) => item.value),\n\t\"Invalid selection\"\n\t)\n),","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":30,"parentId":28,"label":"VBIPAddress","value":"v.pipe(\n\tv.string(\"IP address must be a string\"),\n\tv.minLength(7, \"Please enter a valid IP address\"), // Minimum length for IP: \"0.0.0.0\"\n\tv.maxLength(15, \"IP address is too long\"), // Max for IPv4: \"255.255.255.255\"\n\tv.regex(\n\t\t/^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$/,\n\t\t\"Invalid IP address format\"\n\t),\n\tv.trim()\n),","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":31,"parentId":28,"label":"VBSting","value":"v.pipe(\n\tv.string('Value must be a string'),\n\tv.minLength(1, 'This field cannot be empty'),\n\tv.maxLength(100, 'Value is too long'),\n\tv.regex(/^[A-Za-z\\s]+$/, 'Only English letters and spaces are allowed'),\n\tv.trim()\n)","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":32,"parentId":28,"label":"VBNumber","value":"v.pipe(\n  v.number('Value must be a number'),\n  v.minValue(0, 'Only digits 0 to 9 allowed'),\n  v.maxValue(9, 'Only digits 0 to 9 allowed')\n)","language":".jsx","children":[]},{"id":33,"parentId":28,"label":"VBPassword","value":"v.pipe(\n  v.string('Password must be a string'),\n  v.minLength(8, 'Password must be at least 8 characters'),\n  v.maxLength(100, 'Password is too long'),\n  v.regex(/[a-z]/, 'Password must contain a lowercase letter'),\n  v.regex(/[A-Z]/, 'Password must contain an uppercase letter'),\n  v.regex(/[0-9]/, 'Password must contain a number'),\n  v.regex(/[\\W_]/, 'Password must contain a special character'),\n  v.trim()\n)","language":".jsx","children":[]},{"id":34,"parentId":28,"label":"VBEmail","value":"v.pipe(\n  v.string('Email must be a string'),\n  v.minLength(1, 'Please enter your email'),\n  v.email('Invalid email format'),\n  v.maxLength(100, 'Email is too long'),\n  v.trim()\n)","language":".jsx","children":[]},{"id":43,"parentId":28,"label":"VBUnits","value":"v.pipe(\n  v.string(\"Value must be a string\"),\n  v.minLength(1, \"This field cannot be empty\"),\n  v.maxLength(100, \"Value is too long\"),\n  v.regex(\n    /^[A-Za-z0-9\\s\\/\\.\\-%²³μµΩ·°]+$/,\n    \"Invalid unit format\"\n  ),\n  v.trim()\n),","language":".jsx","children":[]},{"id":49,"parentId":28,"label":"VBFileImage","value":"v.pipe(\n              v.file(\"Please select an image file.\"),\n              v.mimeType([\"image/jpeg\"], \"Please select a JPEG or PNG file\"),\n              v.maxSize(\n                1024 * 1024 * 10,\n                \"Please select a file smaller than 10 MB\"\n              )\n            ),","language":".jsx","children":[],"resolveSyntax":false}]},{"id":74,"parentId":9,"label":"JS","folder":true,"children":[{"id":73,"parentId":74,"label":"ExFun","value":"export function ${1:FuntionName}(props) {\n  // Add Biz Logic Here\n\n  return (\n    <>\n      {/* Add DOM HERE */}\n      ${2:DOMwithConditions}\n      {/* Add DOM HERE */}\n    </>\n  );\n}","language":".jsx","children":[],"resolveSyntax":false,"description":"","prefix":""}]}]},{"id":26,"parentId":1,"label":"Astro","folder":true,"children":[{"id":25,"parentId":26,"label":"AstroNewPage","value":"---\nimport Layout from \"../../layouts/layout_1_withhandf.astro\";\nimport ${2:JSX Page} from \"../../components/features/${3:URL}\";\n---\n\n<Layout title=\"${1:Page_Title} | KADA\">\n  <${2:JSX Page} client:only=\"solid\" />\n</Layout>","language":".astro","children":[]}]}]}
